Pls <- Polygons(list(Pl), ID=ID)
SPls <- SpatialPolygons(list(Pls))
bounddf <- data.frame(value=1, row.names=ID)
boundarea <- SpatialPolygonsDataFrame(SPls, bounddf)
proj4string(boundarea) = proj1
newmap <- readOGR('/Users/i2/Downloads/cbmap/cb_2018_us_state_20m.shp')
contUS = newmap[newmap$STATEFP < 60 & newmap$NAME != "Alaska" & newmap$NAME != "Hawaii", ]
transUS <- contUS
transUS <- spTransform(transUS, crs(proj4proj))
outlineUS <- aggregate(transUS)
grd <- as.data.frame(spsample(boundarea, "regular", n=4000))
library(tidyverse)
library(RSQLite)
library(here)
library(automap)
library(gstat)
library(sp)
library(sf)
library(dplyr)
library(ggplot2)
library(tmap)
library(rasterVis)
library(RColorBrewer)
library(rgdal)
library(raster)
library(rgeos)
library(ggspatial)
library(scales)
library(grDevices)
library(colorRamps)
con <- dbConnect(drv = RSQLite::SQLite(),
here("Documents", "mapQuiz", "data", "currentDB", "ygdpDB.db"))
proj4proj <- "+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +ellps=sphere +units=m +no_defs"
proj1 <- "+proj=longlat +datum=NAD83 +no_defs"
ratingstbl <- tbl(con, "ratings") %>%
filter(sentenceID == "1002") %>%
select(responseID, rating) %>%
collect()
demotbl <- tbl(con, "demo_geo") %>%
select(raisedCityID, responseID) %>%
collect()
joined <- ratingstbl %>%
left_join(demotbl, "responseID") %>%
select(raisedCityID, rating) %>%
filter(raisedCityID != "NA") %>%
collect()
citytbl <- tbl(con, "cities") %>%
select(cityID, lat, long) %>%
collect()
joinedcity <- joined %>%
left_join(citytbl, by = c("raisedCityID" = "cityID")) %>%
filter(raisedCityID != "NA") %>%
select(rating, long, lat) %>%
collect()
spatialDat <- as.data.frame(joinedcity)
spatialDat$long <- as.numeric(spatialDat$long)
spatialDat$lat <- as.numeric(spatialDat$lat)
coordinates(spatialDat) = ~long+lat
proj4string(spatialDat) = proj1
plot(spatialDat)
crds <- cbind(x=c(-126, -126, -65, -65), y=c(23, 51, 51, 23))
Pl <-  Polygon(crds)
ID <-  "gridpoly"
Pls <- Polygons(list(Pl), ID=ID)
SPls <- SpatialPolygons(list(Pls))
bounddf <- data.frame(value=1, row.names=ID)
boundarea <- SpatialPolygonsDataFrame(SPls, bounddf)
proj4string(boundarea) = proj1
newmap <- readOGR('/Users/i2/Downloads/cbmap/cb_2018_us_state_20m.shp')
contUS = newmap[newmap$STATEFP < 60 & newmap$NAME != "Alaska" & newmap$NAME != "Hawaii", ]
transUS <- contUS
transUS <- spTransform(transUS, crs(proj4proj))
outlineUS <- aggregate(transUS)
grd <- as.data.frame(spsample(boundarea, "regular", n=4000))
names(grd) <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
#proj4string(grd) = proj4string(contUS)
gridded(grd)     <- TRUE
fullgrid(grd)    <- TRUE
proj4string(grd) = proj1
#IDW GENERATION
datidw = gstat::idw(rating ~ 1, spatialDat, nmax = 12, newdata=grd, idp=.5)
ridw = raster(datidw)
rfocal = focal(ridw, w=matrix(1,3,3), mean)
rdis = disaggregate(rfocal, 14, method = "bilinear")
maskedrdis <- mask(rdis, contUS)
reprojrast <- projectRaster(maskedrdis, crs=proj4proj)
ptsrpr <- rasterToPoints(reprojrast, spatial = TRUE)
dfrpr <- data.frame(ptsrpr)
yourchoice <-  3
?projectRaster
reprojrast <- raster::projectRaster(maskedrdis, crs=proj4proj)
reprojrast <- rgdal::projectRaster(maskedrdis, crs=proj4proj)
reprojrast <- projectRaster(maskedrdis, crs=proj4proj)
library(shiny); runApp('Downloads/shiny.rstudio.com-tutorial-master/part-1-code/02-hist-app.R')
rm(list = ls())
runApp('Downloads/shiny.rstudio.com-tutorial-master/part-1-code/02-hist-app.R')
#load("~/Documents/mapQuiz/data/bigTable1.rda")
load("~/Documents/mapQuiz/data/s11.rda")
runApp('Downloads/shiny.rstudio.com-tutorial-master/part-1-code/02-hist-app.R')
detach("package:automap", unload = TRUE)
runApp('Downloads/shiny.rstudio.com-tutorial-master/part-1-code/02-hist-app.R')
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
detachAllPackages()
detach("package:datasets", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:stats", unload = TRUE)
detach("package:utils", unload = TRUE)
library(shiny); runApp('Downloads/shiny.rstudio.com-tutorial-master/part-1-code/02-hist-app.R')
library(tidyverse)
library(RSQLite)
library(shiny)
library(gstat)
library(sp)
library(sf)
library(dplyr)
library(ggplot2)
library(tmap)
library(rasterVis)
library(RColorBrewer)
library(rgdal)
library(raster)
library(rgeos)
library(ggspatial)
library(scales)
library(grDevices)
library(colorRamps)
con <- dbConnect(drv = RSQLite::SQLite(),
here("Documents", "mapQuiz", "data", "currentDB", "ygdpDB.db"))
proj4proj <- "+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +ellps=sphere +units=m +no_defs"
library(here)
con <- dbConnect(drv = RSQLite::SQLite(),
here("Documents", "mapQuiz", "data", "currentDB", "ygdpDB.db"))
library(tidyverse)
library(RSQLite)
con <- dbConnect(drv = RSQLite::SQLite(),
here("Documents", "mapQuiz", "data", "currentDB", "ygdpDB.db"))
library(utils)
con <- dbConnect(drv = RSQLite::SQLite(),
here("Documents", "mapQuiz", "data", "currentDB", "ygdpDB.db"))
library(tidyverse)
library(RSQLite)
library(here)
library(shiny)
library(gstat)
library(sp)
library(sf)
library(dplyr)
library(ggplot2)
library(tmap)
library(rasterVis)
library(RColorBrewer)
library(rgdal)
library(raster)
library(rgeos)
library(ggspatial)
library(scales)
library(grDevices)
library(colorRamps)
con <- dbConnect(drv = RSQLite::SQLite(),
here("Documents", "mapQuiz", "data", "currentDB", "ygdpDB.db"))
proj4proj <- "+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +ellps=sphere +units=m +no_defs"
proj1 <- "+proj=longlat +datum=NAD83 +no_defs"
ratingstbl <- tbl(con, "ratings") %>%
filter(sentenceID == "1002") %>%
select(responseID, rating) %>%
collect()
demotbl <- tbl(con, "demo_geo") %>%
select(raisedCityID, responseID) %>%
collect()
joined <- ratingstbl %>%
left_join(demotbl, "responseID") %>%
select(raisedCityID, rating) %>%
filter(raisedCityID != "NA") %>%
collect()
citytbl <- tbl(con, "cities") %>%
select(cityID, lat, long) %>%
collect()
joinedcity <- joined %>%
left_join(citytbl, by = c("raisedCityID" = "cityID")) %>%
filter(raisedCityID != "NA") %>%
select(rating, long, lat) %>%
collect()
spatialDat <- as.data.frame(joinedcity)
spatialDat$long <- as.numeric(spatialDat$long)
spatialDat$lat <- as.numeric(spatialDat$lat)
coordinates(spatialDat) = ~long+lat
proj4string(spatialDat) = proj1
plot(spatialDat)
crds <- cbind(x=c(-126, -126, -65, -65), y=c(23, 51, 51, 23))
Pl <-  Polygon(crds)
ID <-  "gridpoly"
Pls <- Polygons(list(Pl), ID=ID)
SPls <- SpatialPolygons(list(Pls))
bounddf <- data.frame(value=1, row.names=ID)
boundarea <- SpatialPolygonsDataFrame(SPls, bounddf)
proj4string(boundarea) = proj1
newmap <- readOGR('/Users/i2/Downloads/cbmap/cb_2018_us_state_20m.shp')
contUS = newmap[newmap$STATEFP < 60 & newmap$NAME != "Alaska" & newmap$NAME != "Hawaii", ]
transUS <- contUS
transUS <- spTransform(transUS, crs(proj4proj))
outlineUS <- aggregate(transUS)
grd <- as.data.frame(spsample(boundarea, "regular", n=4000))
names(grd) <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
#proj4string(grd) = proj4string(contUS)
gridded(grd)     <- TRUE
fullgrid(grd)    <- TRUE
proj4string(grd) = proj1
#IDW GENERATION
datidw = gstat::idw(rating ~ 1, spatialDat, nmax = 12, newdata=grd, idp=.5)
ridw = raster(datidw)
rfocal = focal(ridw, w=matrix(1,3,3), mean)
rdis = disaggregate(rfocal, 14, method = "bilinear")
maskedrdis <- mask(rdis, contUS)
reprojrast <- projectRaster(maskedrdis, crs=proj4proj)
ptsrpr <- rasterToPoints(reprojrast, spatial = TRUE)
dfrpr <- data.frame(ptsrpr)
yourchoice <-  3
colorset = c("#543005","#8c510a","#bf812d","#f6e8c3","#f5f5f5","#c7eae5","#35978f","#01665e","#003c30")
ggplot() +
geom_raster(data = dfrpr, aes(x = x, y = y, fill = layer))+
layer_spatial(data = transUS, fill = NA, color = "black", size = .3)+
layer_spatial(data = outlineUS, fill = NA, color = "black", size = .8)+
scale_fill_gradientn(limits = c(1,5), colors = colorset[(6-yourchoice):(10-yourchoice)])+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
legend.position = "none")
ggplot() +
geom_raster(data = dfrpr, aes(x = x, y = y, fill = layer))+
layer_spatial(data = transUS, fill = NA, color = "black", size = .3)+
layer_spatial(data = outlineUS, fill = NA, color = "black", size = .8)+
scale_fill_gradientn(colors = colorset[(6-yourchoice):(10-yourchoice)])+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
legend.position = "none")
ggplot() +
geom_raster(data = dfrpr, aes(x = x, y = y, fill = layer))+
layer_spatial(data = transUS, fill = NA, color = "black", size = .3)+
layer_spatial(data = outlineUS, fill = NA, color = "black", size = .8)+
scale_fill_gradientn(limits = c(1,5), colors = colorset[(6-yourchoice):(10-yourchoice)])+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
legend.position = "none")
View(rasteridw)
View(ridw)
ridw@data
View(dfrpr)
idk <- dfrpr %>% filter(layer > 5 | layer < 1)
plot(dfrpr)
View(as.data.frame(ridw))
library(tidyverse)
library(RSQLite)
library(here)
library(shiny)
library(gstat)
library(sp)
library(sf)
library(dplyr)
library(ggplot2)
library(tmap)
library(rasterVis)
library(RColorBrewer)
library(rgdal)
library(raster)
library(rgeos)
library(ggspatial)
library(scales)
library(grDevices)
library(colorRamps)
con <- dbConnect(drv = RSQLite::SQLite(),
here("Documents", "mapQuiz", "data", "currentDB", "ygdpDB.db"))
proj4proj <- "+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +ellps=sphere +units=m +no_defs"
proj1 <- "+proj=longlat +datum=NAD83 +no_defs"
ratingstbl <- tbl(con, "ratings") %>%
filter(sentenceID == "1002") %>%
select(responseID, rating) %>%
collect()
demotbl <- tbl(con, "demo_geo") %>%
select(raisedCityID, responseID) %>%
collect()
joined <- ratingstbl %>%
left_join(demotbl, "responseID") %>%
select(raisedCityID, rating) %>%
filter(raisedCityID != "NA") %>%
collect()
citytbl <- tbl(con, "cities") %>%
select(cityID, lat, long) %>%
collect()
joinedcity <- joined %>%
left_join(citytbl, by = c("raisedCityID" = "cityID")) %>%
filter(raisedCityID != "NA") %>%
select(rating, long, lat) %>%
collect()
spatialDat <- as.data.frame(joinedcity)
spatialDat$long <- as.numeric(spatialDat$long)
spatialDat$lat <- as.numeric(spatialDat$lat)
coordinates(spatialDat) = ~long+lat
proj4string(spatialDat) = proj1
plot(spatialDat)
crds <- cbind(x=c(-126, -126, -65, -65), y=c(23, 51, 51, 23))
Pl <-  Polygon(crds)
ID <-  "gridpoly"
Pls <- Polygons(list(Pl), ID=ID)
SPls <- SpatialPolygons(list(Pls))
bounddf <- data.frame(value=1, row.names=ID)
boundarea <- SpatialPolygonsDataFrame(SPls, bounddf)
proj4string(boundarea) = proj1
newmap <- readOGR('/Users/i2/Downloads/cbmap/cb_2018_us_state_20m.shp')
contUS = newmap[newmap$STATEFP < 60 & newmap$NAME != "Alaska" & newmap$NAME != "Hawaii", ]
transUS <- contUS
transUS <- spTransform(transUS, crs(proj4proj))
outlineUS <- aggregate(transUS)
grd <- as.data.frame(spsample(boundarea, "regular", n=4000))
names(grd) <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
#proj4string(grd) = proj4string(contUS)
gridded(grd)     <- TRUE
fullgrid(grd)    <- TRUE
proj4string(grd) = proj1
#IDW GENERATION
datidw = gstat::idw(rating ~ 1, spatialDat, nmax = 12, newdata=grd, idp=.5)
ridw = raster(datidw)
rfocal = focal(ridw, w=matrix(1,3,3), mean)
rdis = disaggregate(rfocal, 14, method = "bilinear")
maskedrdis <- mask(rdis, contUS)
reprojrast <- projectRaster(maskedrdis, crs=proj4proj)
ptsrpr <- rasterToPoints(reprojrast, spatial = TRUE)
dfrpr <- data.frame(ptsrpr)
yourchoice <-  3
colorset = c("#543005","#8c510a","#bf812d","#f6e8c3","#f5f5f5","#c7eae5","#35978f","#01665e","#003c30")
ggplot() +
geom_raster(data = dfrpr, aes(x = x, y = y, fill = layer))+
layer_spatial(data = transUS, fill = NA, color = "black", size = .3)+
layer_spatial(data = outlineUS, fill = NA, color = "black", size = .8)+
scale_fill_gradientn(limits = c(1,5), colors = colorset[(6-yourchoice):(10-yourchoice)])+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
legend.position = "none")
rdf <- as.data.frame(ridw)
View(rdf)
View(spatialDat)
View(joinedcity)
ratingstbl <- tbl(con, "ratings") %>%
filter(sentenceID == "1002" & rating != "NA") %>%
select(responseID, rating) %>%
collect()
demotbl <- tbl(con, "demo_geo") %>%
select(raisedCityID, responseID) %>%
collect()
joined <- ratingstbl %>%
left_join(demotbl, "responseID") %>%
select(raisedCityID, rating) %>%
filter(raisedCityID != "NA") %>%
collect()
citytbl <- tbl(con, "cities") %>%
select(cityID, lat, long) %>%
collect()
joinedcity <- joined %>%
left_join(citytbl, by = c("raisedCityID" = "cityID")) %>%
filter(raisedCityID != "NA") %>%
select(rating, long, lat) %>%
collect()
spatialDat <- as.data.frame(joinedcity)
spatialDat$long <- as.numeric(spatialDat$long)
spatialDat$lat <- as.numeric(spatialDat$lat)
coordinates(spatialDat) = ~long+lat
proj4string(spatialDat) = proj1
plot(spatialDat)
crds <- cbind(x=c(-126, -126, -65, -65), y=c(23, 51, 51, 23))
Pl <-  Polygon(crds)
ID <-  "gridpoly"
Pls <- Polygons(list(Pl), ID=ID)
SPls <- SpatialPolygons(list(Pls))
bounddf <- data.frame(value=1, row.names=ID)
boundarea <- SpatialPolygonsDataFrame(SPls, bounddf)
proj4string(boundarea) = proj1
newmap <- readOGR('/Users/i2/Downloads/cbmap/cb_2018_us_state_20m.shp')
contUS = newmap[newmap$STATEFP < 60 & newmap$NAME != "Alaska" & newmap$NAME != "Hawaii", ]
transUS <- contUS
transUS <- spTransform(transUS, crs(proj4proj))
outlineUS <- aggregate(transUS)
grd <- as.data.frame(spsample(boundarea, "regular", n=4000))
names(grd) <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
#proj4string(grd) = proj4string(contUS)
gridded(grd)     <- TRUE
fullgrid(grd)    <- TRUE
proj4string(grd) = proj1
#IDW GENERATION
datidw = gstat::idw(rating ~ 1, spatialDat, nmax = 12, newdata=grd, idp=.5)
ridw = raster(datidw)
rfocal = focal(ridw, w=matrix(1,3,3), mean)
rdis = disaggregate(rfocal, 14, method = "bilinear")
maskedrdis <- mask(rdis, contUS)
reprojrast <- projectRaster(maskedrdis, crs=proj4proj)
ptsrpr <- rasterToPoints(reprojrast, spatial = TRUE)
dfrpr <- data.frame(ptsrpr)
yourchoice <-  3
colorset = c("#543005","#8c510a","#bf812d","#f6e8c3","#f5f5f5","#c7eae5","#35978f","#01665e","#003c30")
ggplot() +
geom_raster(data = dfrpr, aes(x = x, y = y, fill = layer))+
layer_spatial(data = transUS, fill = NA, color = "black", size = .3)+
layer_spatial(data = outlineUS, fill = NA, color = "black", size = .8)+
scale_fill_gradientn(limits = c(1,5), colors = colorset[(6-yourchoice):(10-yourchoice)])+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
legend.position = "none")
View(joinedcity)
?spJitter
library(sp)
?spJitter
??spJitter
?spJitterFinite
?spann
install.packages("spann")
install.packages("spjitter")
install.packages("spJitter")
View(joinedcity)
#IDW GENERATION
datidw = gstat::idw(rating ~ 1, spatialDat, nmax = 40, newdata=grd, idp=.5)
ridw = raster(datidw)
rfocal = focal(ridw, w=matrix(1,3,3), mean)
rdis = disaggregate(rfocal, 14, method = "bilinear")
maskedrdis <- mask(rdis, contUS)
reprojrast <- projectRaster(maskedrdis, crs=proj4proj)
ptsrpr <- rasterToPoints(reprojrast, spatial = TRUE)
dfrpr <- data.frame(ptsrpr)
yourchoice <-  3
colorset = c("#543005","#8c510a","#bf812d","#f6e8c3","#f5f5f5","#c7eae5","#35978f","#01665e","#003c30")
ggplot() +
geom_raster(data = dfrpr, aes(x = x, y = y, fill = layer))+
layer_spatial(data = transUS, fill = NA, color = "black", size = .3)+
layer_spatial(data = outlineUS, fill = NA, color = "black", size = .8)+
scale_fill_gradientn(limits = c(1,5), colors = colorset[(6-yourchoice):(10-yourchoice)])+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
legend.position = "none")
#IDW GENERATION
datidw = gstat::idw(rating ~ 1, spatialDat, nmax = 1, newdata=grd, idp=.5)
ridw = raster(datidw)
rfocal = focal(ridw, w=matrix(1,3,3), mean)
rdis = disaggregate(rfocal, 14, method = "bilinear")
maskedrdis <- mask(rdis, contUS)
reprojrast <- projectRaster(maskedrdis, crs=proj4proj)
ptsrpr <- rasterToPoints(reprojrast, spatial = TRUE)
dfrpr <- data.frame(ptsrpr)
yourchoice <-  3
colorset = c("#543005","#8c510a","#bf812d","#f6e8c3","#f5f5f5","#c7eae5","#35978f","#01665e","#003c30")
ggplot() +
geom_raster(data = dfrpr, aes(x = x, y = y, fill = layer))+
layer_spatial(data = transUS, fill = NA, color = "black", size = .3)+
layer_spatial(data = outlineUS, fill = NA, color = "black", size = .8)+
scale_fill_gradientn(limits = c(1,5), colors = colorset[(6-yourchoice):(10-yourchoice)])+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
legend.position = "none")
#IDW GENERATION
datidw = gstat::idw(rating ~ 1, spatialDat, nmax = 12, newdata=grd, idp=.5)
#IDW GENERATION
datidw = gstat::idw(rating ~ 1, spatialDat, nmax = 12, newdata=grd, idp=.5)
m <-autoKrige(layer ~ 1, spatialDat, new_data=grd)
m <- automap::autoKrige(layer ~ 1, spatialDat, new_data=grd)
install.packages("geoR")
dt1 <- jitterDupCoords(joinedcity, max=0.0000001)
dt1 <- geoR::jitterDupCoords(joinedcity, max=0.0000001)
install.packages("tcltk")
dt1 <- geoR::jitterDupCoords(joinedcity, max=0.0000001)
dt1 <- geoR::jitterDupCoords(joinedcity, max=0.0000001)
dt1 <- geoR::jitterDupCoords(joinedcity, max=0.0000001)
dt1 <- geoR::jitterDupCoords(joinedcity, max=0.0000001)
shiny::runApp('Documents/mapQuiz')
runApp()
runApp()
runApp('Documents/mapQuiz')
shiny::runApp('Documents/mapQuiz')
